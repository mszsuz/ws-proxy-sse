import Fastify from 'fastify';
import * as fs from 'fs';
import * as path from 'path';

const settings = JSON.parse(fs.readFileSync(path.join(__dirname, '../../settings.json'), 'utf8'));

const server = Fastify({ logger: false });
const PORT = settings.testServer.port;

server.post('/events', async (request, reply) => {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è SSE
  reply.raw.setHeader('Content-Type', 'text/event-stream');
  reply.raw.setHeader('Cache-Control', 'no-cache');
  reply.raw.setHeader('Connection', 'keep-alive');
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  reply.raw.setHeader('X-Server-Name', 'Test SSE Server');
  reply.raw.setHeader('X-Server-Version', '1.0.0');
  reply.raw.setHeader('X-Request-ID', `req-${Date.now()}`);
  reply.raw.setHeader('X-Custom-Header', 'Custom Value');
  
  reply.raw.flushHeaders(); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ

  const body = request.body as { message?: string };
  const receivedMessage = body?.message || 'No message received';
  
  console.log(`üì® Received: ${receivedMessage}`);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –≤ –æ–¥–Ω–æ–π SSE —Å–µ—Å—Å–∏–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
  const responseCount = settings.testServer?.responseCount || 3;
  for (let i = 1; i <= responseCount; i++) {
    const echoMessage = JSON.stringify({ 
      type: 'echo',
      originalMessage: receivedMessage,
      timestamp: new Date().toISOString(),
      response: `Echo ${i}/${responseCount}: ${receivedMessage}`,
      sequence: i
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã SSE —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    if (i === 1) {
      // –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–±—ã—á–Ω–æ–µ —Å ID
      reply.raw.write(`id: echo-${Date.now()}-${i}\n`);
      reply.raw.write(`data: ${echoMessage}\n\n`);
    } else if (i === 2) {
      // –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Å —Ç–∏–ø–æ–º —Å–æ–±—ã—Ç–∏—è
      reply.raw.write(`id: echo-${Date.now()}-${i}\n`);
      reply.raw.write(`event: user-message\n`);
      reply.raw.write(`data: ${echoMessage}\n\n`);
    } else {
      // –¢—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Å retry –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ data –ø–æ–ª—è–º–∏
      reply.raw.write(`id: echo-${Date.now()}-${i}\n`);
      reply.raw.write(`event: final-message\n`);
      reply.raw.write(`retry: 5000\n`);
      reply.raw.write(`data: ${echoMessage}\n`);
      reply.raw.write(`data: Additional data line\n\n`);
    }
    
    console.log(`üì§ Echo ${i}/${responseCount}: ${receivedMessage}`);
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
    const responseDelay = settings.testServer?.responseDelay || 1000;
    if (i < responseCount) {
      await new Promise(resolve => setTimeout(resolve, responseDelay));
    }
  }
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
  reply.raw.end();
  console.log('üîå Client disconnected');

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–º (–ø—Ä–æ–∫—Å–∏)
  request.raw.on('close', () => {
    console.log('üîå Client disconnected (by client)');
  });
});

server.listen({ port: PORT }, (err) => {
  if (err) {
    server.log.error(err);
    process.exit(1);
  }
});
