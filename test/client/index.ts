import WebSocket from 'ws';
import * as fs from 'fs';
import * as path from 'path';

const settings = JSON.parse(fs.readFileSync(path.join(__dirname, '../../settings.json'), 'utf8'));

const ws = new WebSocket(`ws://${settings.proxy.host}:${settings.proxy.port}/proxy`);

let messageCounter = 0;
let isWaitingForResponse = false;
let maxMessages = settings.testClient?.maxMessages || 3;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è WebSocket
function getWebSocketState(state: number): string {
  const states: { [key: number]: string } = {
    [WebSocket.CONNECTING]: 'CONNECTING',
    [WebSocket.OPEN]: 'OPEN',
    [WebSocket.CLOSING]: 'CLOSING',
    [WebSocket.CLOSED]: 'CLOSED'
  };
  return states[state] || `UNKNOWN(${state})`;
}

function sendMessage() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  if (ws.readyState !== WebSocket.OPEN) {
    console.log(`‚ùå WebSocket not connected (state: ${getWebSocketState(ws.readyState)}). Skipping message #${messageCounter + 1}`);
    return;
  }

  // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞
  if (isWaitingForResponse) {
    console.log(`‚è≥ Waiting for response, skipping message #${messageCounter + 1}`);
    return;
  }

  messageCounter++;
  const message = `${settings.testClient.message} #${messageCounter}`;
  
  const requestPayload = {
    protocol: 'http',
    address: settings.testServer.host,
    port: settings.testServer.port,
    path: '/events',
    method: 'POST',
    headers: {
      'Accept': 'text/event-stream',
      'Content-Type': 'application/json'
    },
    body: {
      message: message
    }
  };

  console.log(`üì§ #${messageCounter}: ${message}`);
  isWaitingForResponse = true;
  ws.send(JSON.stringify(requestPayload));
}

function scheduleNextMessage() {
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
  if (messageCounter < maxMessages && ws.readyState === WebSocket.OPEN) {
    // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
    const sendDelay = settings.testClient?.sendDelay || 1000;
    setTimeout(() => {
      if (ws.readyState === WebSocket.OPEN) {
        sendMessage();
      }
    }, sendDelay);
  } else if (messageCounter >= maxMessages) {
    console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${maxMessages} —Å–æ–æ–±—â–µ–Ω–∏–π. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞.`);
    ws.close();
  }
}

ws.on('open', () => {
  console.log('‚úÖ Connected to Proxy WebSocket');
  console.log(`üìã –ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${maxMessages} —Å–æ–æ–±—â–µ–Ω–∏–π`);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É
  sendMessage();
});

ws.on('message', (data: Buffer) => {
  const message = JSON.parse(data.toString());
  
  if (message.type === 'connected') {
    console.log(`‚úÖ Connected to server (${message.payload.status})`);
    if (message.payload.headers) {
      console.log(`üìã Server headers:`, message.payload.headers);
    }
  } else if (message.type === 'data') {
    // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    const data = JSON.parse(message.payload);
    console.log(`üì• Echo: ${data.response}`);
    // –ü–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç, –Ω–æ –∂–¥–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  } else if (message.type === 'sse-event') {
    // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–ª–Ω—ã–º–∏ SSE –ø–æ–ª—è–º–∏
    const sseData = message.payload;
    console.log(`üì• SSE Event [${sseData.event}]:`);
    if (sseData.id) {
      console.log(`   üÜî ID: ${sseData.id}`);
    }
    if (sseData.retry) {
      console.log(`   üîÑ Retry: ${sseData.retry}ms`);
    }
    
    try {
      const echoData = JSON.parse(sseData.data);
      console.log(`   üìù Data: ${echoData.response || sseData.data}`);
    } catch (e) {
      console.log(`   üìù Data: ${sseData.data}`);
    }
    // –ü–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç, –Ω–æ –∂–¥–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  } else if (message.type === 'closed') {
    console.log(`üîö Server closed: ${message.payload.reason}`);
    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    isWaitingForResponse = false;
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª
    scheduleNextMessage();
  } else if (message.type === 'error') {
    console.log(`‚ùå Error: ${message.payload.message}`);
    // –û—à–∏–±–∫–∞, –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    isWaitingForResponse = false;
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª
    scheduleNextMessage();
  } else {
    // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log(`üì• Received: ${JSON.stringify(message)}`);
  }
});

ws.on('close', (code: number, reason: Buffer) => {
  console.log(`‚ùå Disconnected (code: ${code}, reason: ${reason.toString()})`);
  console.log('\nüìã –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞...');
  
  // –ñ–¥–µ–º –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
  process.stdin.setRawMode(true);
  process.stdin.resume();
  process.stdin.on('data', () => {
    process.exit(0);
  });
});

ws.on('error', (error: Error) => {
  console.error('‚ùå WebSocket error:', error.message);
  console.log('\nüìã –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞...');
  
  // –ñ–¥–µ–º –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
  process.stdin.setRawMode(true);
  process.stdin.resume();
  process.stdin.on('data', () => {
    process.exit(0);
  });
});
